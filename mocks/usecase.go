// Code generated by MockGen. DO NOT EDIT.
// Source: ../usecase/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/guntoroyk/go-user-api/entity"
)

// MockAuthUsecaseItf is a mock of AuthUsecaseItf interface.
type MockAuthUsecaseItf struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUsecaseItfMockRecorder
}

// MockAuthUsecaseItfMockRecorder is the mock recorder for MockAuthUsecaseItf.
type MockAuthUsecaseItfMockRecorder struct {
	mock *MockAuthUsecaseItf
}

// NewMockAuthUsecaseItf creates a new mock instance.
func NewMockAuthUsecaseItf(ctrl *gomock.Controller) *MockAuthUsecaseItf {
	mock := &MockAuthUsecaseItf{ctrl: ctrl}
	mock.recorder = &MockAuthUsecaseItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthUsecaseItf) EXPECT() *MockAuthUsecaseItfMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthUsecaseItf) Login(username, password string) (*entity.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", username, password)
	ret0, _ := ret[0].(*entity.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthUsecaseItfMockRecorder) Login(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthUsecaseItf)(nil).Login), username, password)
}

// RefreshToken mocks base method.
func (m *MockAuthUsecaseItf) RefreshToken(username, role string) (*entity.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", username, role)
	ret0, _ := ret[0].(*entity.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockAuthUsecaseItfMockRecorder) RefreshToken(username, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockAuthUsecaseItf)(nil).RefreshToken), username, role)
}

// MockUserUsecaseItf is a mock of UserUsecaseItf interface.
type MockUserUsecaseItf struct {
	ctrl     *gomock.Controller
	recorder *MockUserUsecaseItfMockRecorder
}

// MockUserUsecaseItfMockRecorder is the mock recorder for MockUserUsecaseItf.
type MockUserUsecaseItfMockRecorder struct {
	mock *MockUserUsecaseItf
}

// NewMockUserUsecaseItf creates a new mock instance.
func NewMockUserUsecaseItf(ctrl *gomock.Controller) *MockUserUsecaseItf {
	mock := &MockUserUsecaseItf{ctrl: ctrl}
	mock.recorder = &MockUserUsecaseItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUsecaseItf) EXPECT() *MockUserUsecaseItfMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserUsecaseItf) CreateUser(user *entity.User) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserUsecaseItfMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserUsecaseItf)(nil).CreateUser), user)
}

// DeleteUser mocks base method.
func (m *MockUserUsecaseItf) DeleteUser(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserUsecaseItfMockRecorder) DeleteUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserUsecaseItf)(nil).DeleteUser), id)
}

// GetUser mocks base method.
func (m *MockUserUsecaseItf) GetUser(id int) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", id)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserUsecaseItfMockRecorder) GetUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserUsecaseItf)(nil).GetUser), id)
}

// GetUsers mocks base method.
func (m *MockUserUsecaseItf) GetUsers() ([]*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].([]*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUserUsecaseItfMockRecorder) GetUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUserUsecaseItf)(nil).GetUsers))
}

// UpdateUser mocks base method.
func (m *MockUserUsecaseItf) UpdateUser(user *entity.User) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserUsecaseItfMockRecorder) UpdateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserUsecaseItf)(nil).UpdateUser), user)
}
